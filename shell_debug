shell调试方法：

 1、使用trap命令       
   trap命令用于捕获指定的信号并执行预定义的命令，其基本的语法是: trap 'command' signal 
   其中signal是要捕获的信号，command是捕获到指定的信号之后，所要执行的命令。可以用kill –l命令看到系统中全部可用的信号名，
 捕获信号后所执行的命令可以是任何一条或多条合法的shell语句，也可以是一个函数名。
   shell脚本在执行时，会产生三个“伪信号”，之所以称之为“伪信号”是因为这三个信号是由shell产生的，而其它的信号是由操
 作系统产生的。
  shell伪信号信号名         何时产生
  EXIT                     从一个函数中退出或整个脚本执行完毕
  ERR                      当一条命令返回非零状态时(代表命令执行不成功)
  DEBUG                    脚本中每一条命令执行之前


eg1: 
  1 #/usr/env sh
  2
  3
  4 ERR_TRAP()
  5 {
  6         echo "[$LINENO] : Command exit with status with $?"
  7 }
  8
  9 foo()
 10 {
 11         return 1
 12 }
 13
 14 trap 'ERR_TRAP' ERR
 15
 16 haha
 17
 18 foo

执行结果：
./trap.sh: line 16: haha: command not found
[6] : Command exit with status with 127
[6] : Command exit with status with 1


eg2:
  1 #/usr/env sh
  2
  3 trap 'echo "before execute $LINENO, a=$a, b=$b, c=$c"' DEBUG
  4
  5 a=1
  6
  7 if [ $a -eq 1 ]
  8 then
  9         b=2
 10 else
 11         b=3
 12 fi
 13
 14 c=4
 15
 16 echo "end"

执行结果：
before execute 5, a=, b=, c=
before execute 7, a=1, b=, c=
before execute 9, a=1, b=, c=
before execute 14, a=1, b=2, c=
before execute 16, a=1, b=2, c=4
end

可见，DEBUG信号对追踪变量的变化非常有用。

2. 利用-x 选项
eg：
  1 #!/usr/bin/env sh
  2
  3 avar[0]="zero"
  4 avar[1]="first"
  5 avar[2]="second"
  6 avar[3]="third"
  7
  8 echo ${avar[0]}
  9 echo ${avar[1]}
 10 echo ${avar[2]}
 11 echo ${avar[3]}
 12
 13 echo ${avar}

执行结果：
+ avar[0]=zero
+ avar[1]=first
+ avar[2]=second
+ avar[3]=third
+ echo zero
zero
+ echo first
first
+ echo second
second
+ echo third
third
+ echo zero
zero

也可在脚本中用set -x 和 set +x 来控制

  1 #!/usr/bin/env sh
  2
  3 avar[0]="zero"
  4 avar[1]="first"
  5 avar[2]="second"
  6 avar[3]="third"
  7
  8 echo ${avar[0]}
  9
 10 set -x
 11
 12 echo ${avar[1]}
 13 echo ${avar[2]}
 14 echo ${avar[3]}
 15
 16 set +x
 17
 18 echo ${avar}

执行结果：
zero
+ echo first
first
+ echo second
second
+ echo third
third
+ set +x
zero
lfgp00

3. 用开关控制
eg:
  1 #!/usr/bin/env sh
  2
  3 DEBUG=true
  4
  5 MY_DEBUG()
  6 {
  7         [ "$DEBUG" = "true" ] && $@ || :
  8 }
  9
 10 a=1
 11
 12 MY_DEBUG echo "a=$a"
执行结果：
a=1
如果把第三行DEBUG=true 注掉，则不输出





